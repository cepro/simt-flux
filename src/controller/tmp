
	// ///////////////////////////////
	// // If we were to discharge at max power, without reserving any energy, then when would we run out of energy?
	// emptyTimeWithoutReserve := t.Add(assumedDurationToEmpty)

	// // To avoid microgrid imports toward the end of the peak then we may need to reserve some energy
	// reserveDuration := peakEnd.Sub(emptyTimeWithoutReserve)
	// reserveEnergy := microgridResidualPower * reserveDuration.Hours()

	// energyBeforeReserve := availableEnergy - reserveEnergy
	// if energyBeforeReserve <= 0 {
	// 	// We don't have enough energy to service the residual load, so there will be imports during the peak.
	// 	// Just do our best to service the residual load at this point:
	// 	return importAvoidanceHelper(sitePower, lastTargetPower, controlComponentName)
	// }

	// // Knowing the reserve energy/duration allows us to calculate the new max discharge rate which would allow us
	// // to keep that reserve for the end of the peak
	// timeOfReserveOnly := peakEnd.Add(-reserveDuration)
	// durationBeforeReserve := timeOfReserveOnly.Sub(t)
	// if durationBeforeReserve <= 0 {
	// 	// We are already in the reserve duration - do our best to service the residual load
	// 	return importAvoidanceHelper(sitePower, lastTargetPower, controlComponentName)
	// }

	// dischargePowerBeforeReserve := energyBeforeReserve / durationBeforeReserve.Hours()

	// return controlComponent{
	// 	name:         controlComponentName,
	// 	isActive:     true,
	// 	targetPower:  -dischargePowerBeforeReserve,
	// 	controlPoint: controlPointBess,
	// }